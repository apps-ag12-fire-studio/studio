// Regras para o Cloud Firestore
// Estas regras são permissivas para fins de desenvolvimento.
// Para produção, você DEVE restringir o acesso com base na autenticação do usuário
// e na lógica de negócios.

rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Regras para a coleção 'inProgressContracts'
    // Documentos nesta coleção têm IDs que correspondem a 'processId'.
    // Exemplo de caminho: /inProgressContracts/someProcessId123
    match /inProgressContracts/{processId} {
      // PERMISSÃO DE DESENVOLVIMENTO: Permite leitura e escrita para qualquer um.
      // ATENÇÃO: Em produção, restrinja quem pode ler ou escrever estes documentos.
      // Por exemplo, você pode querer permitir que apenas um usuário autenticado
      // que iniciou o processo (se você tiver essa lógica) possa modificar seu
      // próprio 'inProgressContract'.
      // Exemplo (requer autenticação): allow read, write: if request.auth != null;
      // Exemplo mais granular (se 'processId' estivesse ligado a um 'userId'):
      //   function isOwner(userId) {
      //     return request.auth != null && request.auth.uid == userId;
      //   }
      //   allow read, write: if isOwner(resource.data.ownerId); // Supondo que você tenha um campo ownerId
      allow read, write: if true;
    }

    // Regras para a coleção 'submittedContracts'
    // Documentos nesta coleção são criados quando um processo é finalizado.
    // Exemplo de caminho: /submittedContracts/someUniqueDocId
    match /submittedContracts/{submissionId} {
      // PERMISSÃO DE DESENVOLVIMENTO: Permite leitura e escrita para qualquer um.
      // ATENÇÃO: Em produção:
      // - 'create': Geralmente permitido se o usuário está autenticado e os dados são válidos.
      // - 'read': Pode ser restrito a administradores ou ao usuário que submeteu.
      // - 'update', 'delete': Geralmente restrito a administradores.
      // Exemplo (requer autenticação para criar): allow create: if request.auth != null;
      // Exemplo (permitir leitura apenas para admins, se você tiver um campo 'roles' no perfil do usuário):
      //   function isAdmin() {
      //     return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.roles.hasAny(['admin']);
      //   }
      //   allow read: if isAdmin();
      allow read, write: if true;
    }

    // Adicione regras para outras coleções se você as tiver (ex: 'users').
    // Exemplo para uma coleção 'users':
    // match /users/{userId} {
    //   allow read: if request.auth != null;
    //   allow write: if request.auth != null && request.auth.uid == userId;
    // }
  }
}
